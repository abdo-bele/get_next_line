char	*get_next_line(int fd)
{
	char		*buffer;
	static char	*tmp;
	char		*ab;
	int			a;
	size_t		l;

	a = 0;
	if (fd < 0 || BUFFER_SIZE <= 0)
		return (0);
	buffer = malloc(sizeof(char) * BUFFER_SIZE + 1);
	tmp = malloc(sizeof(char) * BUFFER_SIZE + 1);
	if (!buffer)
		return (NULL);
	l = read(fd, buffer, BUFFER_SIZE);
	while (*tmp != '\0')
	{
		*tmp = *buffer;
		tmp++;
		buffer++;
	}
	ab = ft_cpy(tmp);
	tmp = ft_strchr(tmp, '\n');
	return (ab);
}
int	endline(char *p)
{
	int	i;

	i = 0;
	while (p[i] != '\n')
		i++;
	return (i);
}

char	*ft_get_new_len(char *p)
{
	int		i;
	int		a;
	char	*str;

	i = endline(p);
	a = 0;
	// str = malloc(ft_strlen(p) - i + 1);
	str = ft_substr(p, 0, i);
	// i++;
	// while (p[i])
	// 	str[a++] = p[i++];
	// str[a] = '\0';
	free(p);
	return (str);
}

char	*ft_read(int fd, char *ptr, int n)
{
	char		*buffer;
	char		*ab;
	size_t		i;
	int			a;

	if (n == 1)
	{
		buffer = malloc(BUFFER_SIZE);
		ptr = malloc(BUFFER_SIZE + 1);
		i = read(fd, buffer, BUFFER_SIZE);
		ab = ft_strdup(buffer);
		while (ab[a])
		{
			ptr[a] = ab[a];
			a++;
		}
		ptr[a] = '\0';
	}
	return (ptr);
}

char	*ft_dup(char	*h)
{
	int		i;
	int		a;
	char	*abdo;

	i = endline(h);
	a = 0;
	abdo = malloc(i + 2);
	while (i >= 0)
	{
		abdo[a] = h[a];
		a++;
		i--;
	}
	abdo[a] = '\n';
	abdo[a + 1] = '\0';
	return (abdo);
}

char	*get_next_line(int fd)
{
	static char	*ptr = NULL;
	char		*abdo;
	char		*tmp;
	static int	n = 0;

	if (n == 0)
	{
		n = 1;
		ptr = ft_read(fd, ptr, n);
	}
	abdo = ft_dup(ptr);
	ptr = ft_get_new_len(ptr);
	return (abdo);
}
char	*update(char *ptr)
{
	int		i;
	char	*rtn;

	rtn = NULL;
	i = endline(ptr);
	if (i != -1)
	{
		rtn = ft_strdup(ptr + i + 1);
		free(ptr);
		ptr = rtn;
	}
	else if (i == -1 && *ptr != '\0')
		return (NULL);
	return (rtn);
}
char	*sendline(char *ptr)
{
	char	*rtn;
	int		index;

	index = endline(ptr);
	if (index != -1)
	{
		rtn = malloc(sizeof(char) * (index + 2));
		if (!rtn)
			return (NULL);
		ft_memcpy(rtn, ptr, index);
		rtn[index] = '\n';
		rtn[index + 1] = '\0';
	}
	else if (*ptr != '\0' && index == -1)
	{
		rtn = ft_strdup(ptr);
		free(ptr);
	}
	else
		return (free(ptr), NULL);
	return (rtn);
} 
int	endline(char *ptr)
{
	int	i;

	i = 0;
	while (ptr && ptr[i])
	{
		if (ptr[i] == '\n')
			return (i);
		i++;
	}
	return (-1);
}

char	*ft_get_new_len(char *p)
{
	int		i;
	int		a;
	char	*str;

	i = endline(p);
	a = 0;
	str = ft_substr(p, i + 1, i);
	free(p);
	return (str);
}


char	*ft_dup(char	*h)
{
	int		i;
	int		a;
	char	*abdo;

	i = endline(h);
	a = 0;
	if (i != -1)
	{
		abdo = malloc(i + 1);
		if (!abdo)
			return (NULL);
		ft_memcpy(abdo, h, i);
		// while (h[a++] && i--)
		// 	abdo[a] = h[a];
		abdo[i + 1] = '\0';
	}
	else if (*h != '\n' && i == -1)
	{
		abdo = ft_strdup(h);
		free(h);
	}
	else
		return (free(h), NULL);
	return (abdo);
}

char	*get_next_line(int fd)
{
	static char	*abdo;
	char		*str;
	char		*ab;
	int			n;

	abdo = ft_strdup("");

	if (fd < 0 || BUFFER_SIZE <= 0)
		return (NULL);
	str = malloc(BUFFER_SIZE + 1);
	if (!str)
		return (NULL);
	n = 1;
	while (endline(abdo) == -1 && n >= 0)
	{
		n = read(fd, str, BUFFER_SIZE);
		if (str[0]== '\0')
			return (NULL);
		if (n == -1 || n == 0)
			return (free(str), NULL);
		str[n] = '\0';
		abdo = ft_strjoin(abdo, str);
		// free(str);
	}
	ab = ft_dup(abdo);
	return (ab);
}





char	*update(char	*ptr)
{
	char	*abdo;
	int		i;
	int		a;

	i = 0;
	while (ptr[i] && ptr[i] != '\n')
		i++;
	if (!ptr[i])
		return (NULL);
	abdo = malloc(ft_strlen(ptr) - i + 1);
	if (!abdo)
		return (NULL);
	a = 0;
	while (ptr[i])
		abdo[a++] = ptr[i++];
	free(ptr);
	return (abdo);
}

char	*get_line(char	*str)
{
	char	*ab;
	int		i;

	i = 0;
	ab = ft_substr(str, 0, endline(str));
	return (ab);
}













